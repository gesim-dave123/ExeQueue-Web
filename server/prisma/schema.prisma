// ===============================================
// PRISMA SCHEMA
// Queue Management System (Refined & Polished)
// ===============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================== ENUMS ===================

enum Role {
  PERSONNEL
  WORKING_SCHOLAR
}

enum Queue_Type {
  REGULAR
  PRIORITY
}

enum Status {
  WAITING
  IN_SERVICE
  DEFERRED
  CANCELLED
  COMPLETED
  STALLED
  SKIPPED
  PARTIALLY_COMPLETE
}

enum ShiftTag {
  MORNING
  AFTERNOON
  EVENING
}

// =================== MODELS ===================

model Course {
  courseId    Int       @id @default(autoincrement()) @map("course_id")
  courseCode  String    @unique @db.VarChar(15) @map("course_code")
  courseName  String    @db.VarChar(255) @map("course_name")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@index([isActive], map: "idx_course_is_active")
  @@index([courseCode, isActive], map: "idx_course_code_active")
  @@map("course")
}

model WindowAssignment {
  assignmentId   Int       @id @default(autoincrement())
  sasStaffId     String    @db.Uuid
  windowId       Int
  assignedAt     DateTime  @default(now())
  releasedAt     DateTime? // NULL = still assigned
  lastHeartbeat  DateTime? // updated from frontend
  shiftTag       ShiftTag  @default(MORNING)

  staff          SasStaff      @relation("StaffAssignments", fields: [sasStaffId], references: [sasStaffId], onDelete: Cascade)
  serviceWindow  ServiceWindow @relation("WindowAssignments", fields: [windowId], references: [windowId], onDelete: Cascade)

  @@index([windowId, releasedAt], map: "idx_window_released")
  @@index([sasStaffId, releasedAt], map: "idx_staff_released")
  @@index([shiftTag, releasedAt], map: "idx_shift_released")
}


model SasStaff {
  sasStaffId     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid @map("sas_staff_id")
  username       String    @unique @db.VarChar(100)
  hashedPassword String    @db.VarChar(255) @map("hashed_password")
  firstName      String    @db.VarChar(100) @map("first_name")
  lastName       String    @db.VarChar(100) @map("last_name")
  middleName     String?   @db.VarChar(100) @map("middle_name")
  email          String    @unique @db.VarChar(150)
  role           Role      @default(WORKING_SCHOLAR)
  isActive       Boolean   @default(true) @map("is_active")
  createdBy      String?   @db.Uuid @map("created_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  creator              SasStaff?            @relation("StaffCreatedBy", fields: [createdBy], references: [sasStaffId], onDelete: SetNull)
  createdStaff         SasStaff[]           @relation("StaffCreatedBy")
  processedRequests    Request[]            @relation("ProcessedBy")
  transactionHistories TransactionHistory[] @relation("PerformedBy")
  assignments          WindowAssignment[]   @relation("StaffAssignments")

  @@index([username, isActive], map: "idx_sas_staff_username_active")
  @@index([email, isActive], map: "idx_sas_staff_email_active")
  @@index([role, isActive], map: "idx_sas_staff_role_active")
  @@map("sas_staff")
}

model ServiceWindow {
  windowId         Int       @id @default(autoincrement()) @map("window_id")
  windowNo         Int       @unique @map("window_no")
  windowName       String    @db.VarChar(50) @map("window_name")
  displayName      String?   @db.VarChar(20) @map("display_name")
  canServePriority Boolean   @default(true) @map("can_serve_priority")
  canServeRegular  Boolean   @default(true) @map("can_serve_regular")
  isActive         Boolean   @default(true) @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  assignments WindowAssignment[] @relation("WindowAssignments")
  queues      Queue[]            @relation("WindowQueue")

  @@index([windowNo, isActive], map: "idx_service_window_no_active")
  @@index([isActive, canServePriority, canServeRegular], map: "idx_service_window_capabilities")
  @@map("service_window")
}

model QueueSession {
  sessionId          Int       @id @default(autoincrement()) @map("session_id")
  sessionDate        DateTime  @db.Date @map("session_date")
  sessionNumber      Int       @map("session_number")
  maxQueueNo         Int       @default(500) @map("max_queue_no")
  currentQueueCount  Int       @default(0) @map("current_queue_count")
  regularCount       Int       @default(0) @map("regular_count")
  priorityCount      Int       @default(0) @map("priority_count")
  isAcceptingNew     Boolean   @default(true) @map("is_accepting_new")
  isServing          Boolean   @default(true) @map("is_serving")
  isActive           Boolean   @default(true) @map("is_active")

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  queues      Queue[]              @relation("SessionQueues")
  // assignments WindowAssignment[]   @relation("SessionAssignments")
  @@unique([sessionDate, sessionNumber], name: "sessionDate_sessionNumber")
  @@unique([sessionDate, sessionNumber], map: "unq_session_date_number")
  @@index([sessionDate, isAcceptingNew], map: "idx_session_accepting")
  @@index([sessionDate, isServing], map: "idx_session_serving")
  @@map("queue_session")
}

model Queue {
  queueId         Int        @id @default(autoincrement()) @map("queue_id")
  sessionId       Int        @map("session_id")
  
  // Student snapshot (not FK)
  studentId        String    @db.VarChar(20) @map("student_id")
  studentFullName  String    @db.VarChar(255) @map("student_full_name")
  courseCode       String    @db.VarChar(15) @map("course_code")
  courseName       String    @db.VarChar(255) @map("course_name")
  yearLevel        String    @db.VarChar(20) @map("year_level")
  
  // Queue details
  queueNumber      Int        @map("queue_number")
  sequenceNumber   Int        @map("sequence_number")
  resetIteration   Int        @default(0) @map("reset_iteration")
  referenceNumber  String     @unique @db.VarChar(50) @map("reference_number")
  queueType        Queue_Type @default(REGULAR) @map("queue_type")
  queueStatus      Status     @default(WAITING) @map("queue_status")

  // Service tracking
  windowId        Int?       @map("window_id")
  servedByStaff   String?    @db.Uuid @map("served_by_staff")
  calledAt        DateTime?  @map("called_at")
  completedAt     DateTime?  @map("completed_at")
  
  isActive        Boolean    @default(true) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  deletedAt       DateTime?  @map("deleted_at")

  session              QueueSession       @relation("SessionQueues", fields: [sessionId], references: [sessionId])
  serviceWindow        ServiceWindow?     @relation("WindowQueue", fields: [windowId], references: [windowId], onDelete: SetNull)
  requests             Request[]          @relation("QueueRequest")
  transactionHistories TransactionHistory[] @relation("QueueTransaction")

  @@index([studentId], map: "idx_queue_school_id")
  @@index([queueStatus, queueType, sessionId], map: "idx_queue_status_type_session")
  @@index([sessionId, queueNumber], map: "idx_queue_session_number")
  @@unique([sessionId, sequenceNumber, queueType]) // unique only within session
  @@index([referenceNumber], map: "idx_queue_reference")
  @@map("queue")
}

model Request {
  requestId       Int       @id @default(autoincrement()) @map("request_id")
  queueId         Int       @map("queue_id")
  requestTypeId   Int       @map("request_type_id")
  processedBy     String?   @db.Uuid @map("processed_by")
  requestStatus   Status    @default(WAITING) @map("request_status")
  processedAt     DateTime? @map("processed_at")

  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  queue         Queue     @relation("QueueRequest", fields: [queueId], references: [queueId], onDelete: Cascade, map: "fk_request_queue")
  requestType   RequestType @relation("TypeRequest", fields: [requestTypeId], references: [requestTypeId], onDelete: Restrict, map: "fk_request_type")
  processor           SasStaff?            @relation("ProcessedBy", fields: [processedBy], references: [sasStaffId], onDelete: Restrict, map: "fk_request_processor")
  transactionHistories TransactionHistory[] @relation("RequestTransaction")

  @@index([queueId], map: "idx_request_queue_id")
  @@index([requestStatus, isActive], map: "idx_request_status_active")
  @@index([processedBy, processedAt], map: "idx_request_processor_time")
  @@index([requestTypeId, requestStatus], map: "idx_request_type_status")
  @@index([queueId, requestStatus], map: "idx_request_queue_status")
  @@index([processedAt], map: "idx_request_processed_at")
  @@index([createdAt], map: "idx_request_created_at")
  @@index([isActive, createdAt], map: "idx_request_active_created")
  @@map("request")
}

model RequestType {
  requestTypeId Int       @id @default(autoincrement()) @map("request_type_id")
  requestName   String    @db.VarChar(100) @map("request_name")
  description   String    @db.VarChar(255)
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  requests Request[] @relation("TypeRequest")

  @@index([requestName], map: "idx_request_type_name")
  @@map("request_type")
}

model TransactionHistory {
  transactionHistoryId Int      @id @default(autoincrement()) @map("transaction_history_id")
  queueId              Int      @map("queue_id")
  requestId            Int?     @map("request_id")
  performedById        String   @db.Uuid @map("performed_by_id")
  performedByRole      Role     @map("performed_by_role")
  transactionStatus    Status   @default(WAITING) 
  createdAt            DateTime @default(now()) @map("created_at")

  queue     Queue     @relation("QueueTransaction", fields: [queueId], references: [queueId], onDelete: Cascade, map: "fk_transaction_queue")
  request   Request?  @relation("RequestTransaction", fields: [requestId], references: [requestId], onDelete: SetNull, map: "fk_transaction_request")
  performer SasStaff  @relation("PerformedBy", fields: [performedById], references: [sasStaffId], onDelete: Restrict, map: "fk_transaction_performer")

  @@index([queueId], map: "idx_transaction_queue_id")
  @@index([performedById, createdAt], map: "idx_transaction_performer_time")
  @@index([transactionStatus, createdAt], map: "idx_transaction_action_time")
  @@index([queueId, createdAt], map: "idx_transaction_queue_chronology")
  @@index([requestId], map: "idx_transaction_request_id")
  @@index([performedByRole, transactionStatus], map: "idx_transaction_role_action")
  @@map("transaction_history")
}
